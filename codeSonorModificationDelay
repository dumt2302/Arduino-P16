#include <Arduino.h>
#include <librobus.h>

#define MOTOR_REVERSED 1 // 1 = moteur inverse B, 0 = moteur correct A

int32_t EncodeurDroite = 0;
int32_t EncodeurGauche = 0;
int32_t sumDiff = 0;
bool A = 0;
bool B = 1;
int VirageDegre;
int couleur;
int jaune =1;
int bleu = 2;
int rouge =3;
int x=0;
int block=1;
int quilledefoncer=0;
uint8_t distancequile = 100;
uint8_t DistanceRange = 70;
unsigned long TimeNow = 0;
unsigned long DelaiRadar = 2000;
unsigned long DelaiRadarInitial = 2000;
unsigned long Period = 50;
int distancerestante=240;
int distanceparcouru=0;

void MasterSlave(float MasterMOTOR, int32_t MasterENCODEUR, int32_t SlaveENCODEUR) //Prends en entrée la valeur du moteur maitre et les valeurs d'encodeur
{
  float SlaveMOTOR;                                       //valeur du moteur slave
  int32_t Diff_ENCODEUR = MasterENCODEUR - SlaveENCODEUR; //différence de pas entre les deux moteurs
  sumDiff += Diff_ENCODEUR;
  float kp = 0.001;                                             //valeur de la constante P kp = 0.001
  float ki = 0.00003;                                           //valeur de la constante I ki = 0.00003                            
  SlaveMOTOR = MasterMOTOR + kp * Diff_ENCODEUR + ki * sumDiff; //équation de la valeur du moteur slave
  MOTOR_SetSpeed(1, SlaveMOTOR);
}

void Avancer(int DistanceCm,int *P_distanceparcouru)
{
  ENCODER_ReadReset(0); //reset des encodeurs
  ENCODER_ReadReset(1);
  float vitesse;
  float Vmax = 0.4; //vitesse max
  float Vmin = 0.1; //vitesse min
  float a = 0.03;   //acceleration (chiffre magique)
  float distance = 0;
  int compteur = 1;


  float y1 = a * distance + Vmin; //fonction d'acceleration
  float y2 = Vmax;  //fonction de vitesse max
  float y3 = a * (DistanceCm - distance) + Vmin;  //fonction de decceleration
  #if MOTOR_REVERSED  //car un encodeur est inversé
  compteur = -1;

#endif
   while ((DistanceCm > distance) && (quilledefoncer!=1))
  {
    *P_distanceparcouru= ENCODER_Read(0) * 0.0074809175 * compteur;
    if(millis() >= DelaiRadar)
    {
      distancequile = SONAR_GetRange(0);
      DelaiRadar+=Period;
      Serial.print("distance Quille    ");
      Serial.println(distancequile);
    }
    
    y1 = a * distance + Vmin;
    y2 = Vmax;
    y3 = a * (DistanceCm - distance) + Vmin;
    TimeNow = millis();

    if((distancequile <= DistanceRange) && (quilledefoncer!=2) && TimeNow >= DelaiRadarInitial)
    {
        delay(300);
        MOTOR_SetSpeed(0, 0);
        MOTOR_SetSpeed(1, 0);
        quilledefoncer=1;
    }
    if(y1 < y2 && y1 < y3  )  //l'equation utilisee pour trouver la vitesse est toujour celle donnant le plus petit resultat dans le temps
    {
      distance = ENCODER_Read(0) * 0.0074809175 * compteur;
      y1 = a * distance + Vmin;
      vitesse = y1;
      MOTOR_SetSpeed(0, vitesse);
      MasterSlave(vitesse, ENCODER_Read(0), ENCODER_Read(1));
      Serial.print("y1  ");                     //LES SERIAL.PRINT SONT IMPORTANTS, CAR ILS DONNENT UN DELAIS PARFAIT POUR NOTRE UTILISATION
      Serial.println(distance);

    }
    else if(y2 < y1 && y2 < y3 )
    {
      distance = ENCODER_Read(0) * 0.0074809175 * compteur;
      y2 = Vmax;
      vitesse = y2;
      MOTOR_SetSpeed(0, vitesse);
      MasterSlave(vitesse, ENCODER_Read(0), ENCODER_Read(1));
      Serial.print("y2  ");
      Serial.println(distance);
    }
    else
    {
      distance = ENCODER_Read(0) * 0.0074809175 * compteur;
      y3 = a * (DistanceCm - distance) + Vmin;
      vitesse = y3;
      MOTOR_SetSpeed(0, vitesse);
      MasterSlave(vitesse, ENCODER_Read(0), ENCODER_Read(1));
      Serial.print("y3  ");
      Serial.println(distance);
    }
  }

  delay(100);
}



void virage(int VirageDegre,bool robot)
{
  ENCODER_ReadReset(1);
  ENCODER_ReadReset(0);
  // code
  //la circonférence d'une roue est 23.93894cm
  //la circonférence d'un tour du robot est de 59.6902cm
  //1 degré est égal à 24.934 pulse, donc 25 pulse.

  //définition des variables
    
    int Arondir;
    float UnPulse;
    if (robot==0){
     UnPulse= 0.0469;
      }
   else{
     UnPulse = 0.0469;
     }

    float ValeurPulse;
    //trouve le nombre de pulse nécessaire au virage
    ValeurPulse = abs(VirageDegre/UnPulse);
    Arondir = round(ValeurPulse);
    
   //réinitialise le compteur de pule de l'encodeur
   ENCODER_Reset(0);
   ENCODER_Reset(1);
  //Permet d'arrêter le virage à la bonne direction. 
  
    //Défini si le virage sera vers la gauche ou vers la droite. Positif est en sense horaire et négatif est anti-horaire. 
      if (VirageDegre>=0)
      {
        ENCODER_Reset(0);
        ENCODER_Reset(1);
        while (ENCODER_Read(0)<= Arondir)
        {
          if (ENCODER_Read(0) <= (Arondir/3)) 
          {
            MOTOR_SetSpeed(0,0.4);
            MOTOR_SetSpeed(1,-0.4);
          }
          else if (ENCODER_Read(0) <= (2*Arondir/3) )
          {
            MOTOR_SetSpeed(0,0.3);
            MOTOR_SetSpeed(1,-0.3);
          }
          else
          {
            MOTOR_SetSpeed(0,0.2);
            MOTOR_SetSpeed(1,-0.2);
          }
          
        }
        
      }
      else if(VirageDegre<=0)
      {
        while (ENCODER_Read(1)<= Arondir)
        {
          if (ENCODER_Read(1)<= (Arondir/3))
          {
            MOTOR_SetSpeed(0,-0.4);
            MOTOR_SetSpeed(1,0.4);
          }
          
          else if (ENCODER_Read(1) <= (2*Arondir/3))
          {
            MOTOR_SetSpeed(0,-0.3);
            MOTOR_SetSpeed(1,0.3);
          }
          else 
          {
            MOTOR_SetSpeed(0,-0.2);
            MOTOR_SetSpeed(1,0.2);
          }
        }
        
        
      }
  
  //Arrête la rotation
  MOTOR_SetSpeed(0,0);
  MOTOR_SetSpeed(1,0);
  //réinitialise le compteur de pule de l'encodeur
   ENCODER_Reset(0);
   ENCODER_Reset(1);

}

void  setup()
{
  BoardInit(); //pour librairie

  MOTOR_SetSpeed(0, 0); //Set les moteurs à 0
  MOTOR_SetSpeed(1, 0);
}


void loop(){
  delay(1000);
  Avancer(470,&distanceparcouru);
  quilledefoncer=2;
  delay(1000);
  virage(-90,B);
  delay(1000);
  Avancer(70,&x);
  delay(1000);
  virage(90,B);
  delay(1000);
  distancerestante=400-distanceparcouru;
  Avancer(distancerestante,&x);
  delay(1000);
  while (1==1)
  {
      virage(360,B);
      MOTOR_SetSpeed(0,0);
      MOTOR_SetSpeed(1,0);
      delay(100);
  }
}
